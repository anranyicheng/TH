(in-package :th.pp)

(defgeneric ll/beta (data alpha beta))
(defgeneric ll/exponential (data rate))
(defgeneric ll/gaussian (data location scale))
(defgeneric ll/uniform (data lower upper))

(defgeneric ll/bernoulli (data p))
(defgeneric ll/binomial (data p n))
(defgeneric ll/poisson (data rate))

(defgeneric positive-p (n))
(defmethod positive-p ((n number))
  (> n 0))
(defmethod positive-p ((n list))
  (let ((ne (filter (lambda (v) (<= v 0)) n)))
    (zerop ($count ne))))
(defmethod positive-p ((n tensor))
  (let ((nz ($sum ($le n 0))))
    (zerop nz)))
(defmethod positive-p ((n node))
  (positive-p ($data n)))

(defgeneric negative-p (n))
(defmethod negative-p ((n number))
  (< n 0))
(defmethod negative-p ((n list))
  (let ((ne (filter (lambda (v) (>= v 0)) n)))
    (zerop ($count ne))))
(defmethod negative-p ((n tensor))
  (let ((nz ($sum ($ge n 0))))
    (zerop nz)))
(defmethod negative-p ((n node))
  (negative-p ($data n)))

(defgeneric positive-zero-p (n))
(defmethod positive-zero-p ((n number))
  (>= n 0))
(defmethod positive-zero-p ((n list))
  (let ((ne (filter (lambda (v) (< v 0)) n)))
    (zerop ($count ne))))
(defmethod positive-zero-p ((n tensor))
  (let ((nz ($sum ($lt n 0))))
    (zerop nz)))
(defmethod positive-zero-p ((n node))
  (positive-zero-p ($data n)))

(defgeneric negative-zero-p (n))
(defmethod negative-zero-p ((n number))
  (<= n 0))
(defmethod negative-zero-p ((n list))
  (let ((ne (filter (lambda (v) (> v 0)) n)))
    (zerop ($count ne))))
(defmethod negative-zero-p ((n tensor))
  (let ((nz ($sum ($gt n 0))))
    (zerop nz)))
(defmethod negative-zero-p ((n node))
  (negative-zero-p ($data n)))

(defgeneric probability-p (data))
(defmethod probability-p ((data number))
  (and (<= data 1) (>= data 0)))
(defmethod probability-p ((data list))
  (let ((ne (filter (lambda (v) (or (< v 0) (> v 1))) data)))
    (zerop ($count ne))))
(defmethod probability-p ((data tensor))
  (let ((nz ($sum ($lt data 0)))
        (no ($sum ($gt data 1))))
    (and (zerop nz) (zerop no))))
(defmethod probability-p ((n node))
  (probability-p ($data n)))

(defmethod ll/beta ((data number) (alpha number) (beta number))
  (when (and (probability-p data) (positive-p alpha) (positive-p beta))
    (+ (* (- alpha 1) (log data))
       (* (- beta 1) (log (- 1 data)))
       (- ($lbetaf alpha beta)))))

(defmethod ll/beta ((data number) (alpha number) (beta node))
  (when (and (probability-p data) (positive-p alpha) (positive-p beta)
             (zerop ($ndim alpha)) (zerop ($ndim beta)))
    ($sub ($add ($mul ($sub alpha 1) (log data))
                ($mul ($sub beta 1) (log (- 1 data))))
          ($lbetaf alpha beta))))

(defmethod ll/beta ((data number) (alpha node) (beta number))
  (when (and (probability-p data) (positive-p alpha) (positive-p beta)
             (zerop ($ndim alpha)) (zerop ($ndim beta)))
    ($sub ($add ($mul ($sub alpha 1) (log data))
                ($mul ($sub beta 1) (log (- 1 data))))
          ($lbetaf alpha beta))))

(defmethod ll/beta ((data number) (alpha node) (beta node))
  (when (and (probability-p data) (positive-p alpha) (positive-p beta)
             (zerop ($ndim alpha)) (zerop ($ndim beta)))
    ($sub ($add ($mul ($sub alpha 1) (log data))
                ($mul ($sub beta 1) (log (- 1 data))))
          ($lbetaf alpha beta))))

(defmethod ll/beta ((data list) (alpha number) (beta number))
  (when (and (probability-p data) (positive-p alpha) (positive-p beta))
    ($sum (mapcar (lambda (d)
                    (+ (* (- alpha 1) (log d))
                       (* (- beta 1) (log (- 1 d)))
                       (- ($lbetaf alpha beta))))
                  data))))

(defmethod ll/beta ((data list) (alpha list) (beta list))
  (when (and (probability-p data) (positive-p alpha) (positive-p beta)
             (= ($count data) ($count alpha) ($count beta)))
    ($sum (mapcar (lambda (d a b)
                    (+ (* (- a 1) (log d))
                       (* (- b 1) (log (- 1 d)))
                       (- ($lbetaf a b))))
                  data alpha beta))))

(defmethod ll/beta ((data list) (alpha tensor) (beta tensor))
  (ll/beta (tensor data) alpha beta))

(defmethod ll/beta ((data list) (alpha list) (beta node))
  (ll/beta (tensor data) (tensor alpha) beta))

(defmethod ll/beta ((data list) (alpha node) (beta list))
  (ll/beta (tensor data) alpha (tensor beta)))

(defmethod ll/beta ((data list) (alpha node) (beta node))
  (ll/beta (tensor data) alpha beta))

(defmethod ll/beta ((data tensor) (alpha number) (beta number))
  (when (and (probability-p data) (positive-p alpha) (positive-p beta))
    ($sum ($sub ($add ($mul (- alpha 1) ($log data))
                      ($mul (- beta 1) ($log ($sub 1 data))))
                ($lbetaf alpha beta)))))

(defmethod ll/beta ((data tensor) (alpha list) (beta list))
  (ll/beta data (tensor alpha) (tensor beta)))

(defmethod ll/beta ((data tensor) (alpha tensor) (beta tensor))
  (when (and (probability-p data) (positive-p alpha) (positive-p beta)
             (= ($count data) ($count alpha) ($count beta))
             (= ($ndim data) ($ndim alpha) ($ndim beta)))
    ($sum ($sub! ($add! ($mul! ($sub alpha 1) ($log data))
                        ($mul! ($sub beta 1) ($log ($sub 1 data))))
                 ($lbetaf alpha beta)))))

(defmethod ll/beta ((data tensor) (alpha tensor) (beta node))
  (when (and (probability-p data) (positive-p alpha) (positive-p beta)
             (or (and (zerop ($ndim alpha)) (zerop ($ndim beta)))
                 (and (= ($count data) ($count alpha) ($count beta))
                      (= ($ndim data) ($ndim alpha) ($ndim beta)))))
    ($sum ($sub ($add ($mul ($sub alpha 1) ($log data))
                      ($mul ($sub beta 1) ($log ($sub 1 data))))
                ($lbetaf alpha beta)))))

(defmethod ll/beta ((data tensor) (alpha node) (beta tensor))
  (when (and (probability-p data) (positive-p alpha) (positive-p beta)
             (or (and (zerop ($ndim alpha)) (zerop ($ndim beta)))
                 (and (= ($count data) ($count alpha) ($count beta))
                      (= ($ndim data) ($ndim alpha) ($ndim beta)))))
    ($sum ($sub ($add ($mul ($sub alpha 1) ($log data))
                      ($mul ($sub beta 1) ($log ($sub 1 data))))
                ($lbetaf alpha beta)))))

(defmethod ll/beta ((data tensor) (alpha node) (beta node))
  (when (and (probability-p data) (positive-p alpha) (positive-p beta)
             (or (and (zerop ($ndim alpha)) (zerop ($ndim beta)))
                 (and (= ($count data) ($count alpha) ($count beta))
                      (= ($ndim data) ($ndim alpha) ($ndim beta)))))
    ($sum ($sub ($add ($mul ($sub alpha 1) ($log data))
                      ($mul ($sub beta 1) ($log ($sub 1 data))))
                ($lbetaf alpha beta)))))

(defmethod ll/exponential ((data number) (rate number))
  (when (and (positive-p data) (positive-p rate))
    (- (log rate) (* rate data))))

(defmethod ll/exponential ((data number) (rate node))
  (when (and (positive-p data) (positive-p rate))
    ($sub ($log rate) ($mul rate data))))

(defmethod ll/exponential ((data list) (rate number))
  (when (and (positive-p data) (positive-p rate))
    ($sum (mapcar (lambda (d) (- (log rate) (* rate d))) data))))

(defmethod ll/exponential ((data list) (rate list))
  (when (and (positive-p data) (positive-p rate)
             (= ($count data) ($count rate)))
    ($sum (mapcar (lambda (d r) (- (log r) (* r d))) data rate))))

(defmethod ll/exponential ((data list) (rate tensor))
  (ll/exponential (tensor data) rate))

(defmethod ll/exponential ((data list) (rate node))
  (ll/exponential (tensor data) rate))

(defmethod ll/exponential ((data tensor) (rate number))
  (when (and (positive-p data) (positive-p rate))
    ($sub ($log rate) ($mul rate data))))

(defmethod ll/exponential ((data tensor) (rate list))
  (ll/exponential data (tensor rate)))

(defmethod ll/exponential ((data tensor) (rate tensor))
  (when (and (positive-p data) (positive-p rate)
             (= ($count data) ($count rate))
             (= ($ndim data) ($ndim rate)))
    ($sum ($sub! ($log rate) ($mul rate data)))))

(defmethod ll/exponential ((data tensor) (rate node))
  (when (and (positive-p data) (positive-p rate)
             (or (zerop ($ndim rate))
                 (and (= ($count data) ($count rate))
                      (= ($ndim data) ($ndim rate)))))
    ($sum ($sub ($log rate) ($mul rate data)))))

(defmethod ll/gaussian ((data number) (location number) (scale number)))

(defmethod ll/gaussian ((data number) (location number) (scale node)))

(defmethod ll/gaussian ((data number) (location node) (scale number)))

(defmethod ll/gaussian ((data number) (location node) (scale node)))

(defmethod ll/gaussian ((data list) (location number) (scale number)))
