(in-package :th.pp)

(defgeneric score/mvn (data mean tril))
(defgeneric sample/mvn (mean tril &optional n))

(defun of-mvn-p (tril) (of-plusp ($sum ($diag tril))))

(defun mvn/sub (data mean)
  (let ((nd ($ndim data))
        (d0 ($size data 0))
        (nm ($count mean)))
    (cond ((= nd 1) ($reshape ($sub data mean) 1 d0))
          ((= nd 2) ($sub data ($mm (ones d0 1) ($reshape mean 1 nm)))))))

(defmethod score/mvn ((data tensor) (mean tensor) (tril tensor))
  (when (of-mvn-p tril)
    (let ((k ($count mean))
          (v ($sum ($log ($diag tril))))
          (il ($inverse tril)))
      (let ((c (* k (log (* 2 pi))))
            (dx (mvn/sub data mean))
            (icv ($mm ($transpose il) il)))
        ($sum ($mul -0.5 ($add ($add c v) ($mm ($mm dx icv) ($transpose dx)))))))))

(defmethod score/mvn ((data tensor) (mean node) (tril tensor))
  (when (of-mvn-p tril)
    (let ((k ($count mean))
          (v ($sum ($log ($diag tril))))
          (il ($inverse tril)))
      (let ((c (* k (log (* 2 pi))))
            (dx (mvn/sub data mean))
            (icv ($mm ($transpose il) il)))
        ($sum ($mul -0.5 ($add ($add c v) ($mm ($mm dx icv) ($transpose dx)))))))))

(defmethod score/mvn ((data tensor) (mean tensor) (tril node))
  (when (of-mvn-p ($data tril))
    (let ((k ($count mean))
          (v ($sum ($log ($diag tril))))
          (il ($inverse tril)))
      (let ((c (* k (log (* 2 pi))))
            (dx (mvn/sub data mean))
            (icv ($mm ($transpose il) il)))
        ($sum ($mul -0.5 ($add ($add c v) ($mm ($mm dx icv) ($transpose dx)))))))))

(defmethod score/mvn ((data tensor) (mean node) (tril node))
  (when (of-mvn-p ($data tril))
    (let ((k ($count mean))
          (v ($sum ($log ($diag tril))))
          (il ($inverse tril)))
      (let ((c (* k (log (* 2 pi))))
            (dx (mvn/sub data mean))
            (icv ($mm ($transpose il) il)))
        ($sum ($mul -0.5 ($add ($add c v) ($mm ($mm dx icv) ($transpose dx)))))))))

(defmethod score/mvn ((data node) (mean tensor) (tril tensor))
  (when (of-mvn-p tril)
    (let ((k ($count mean))
          (v ($sum ($log ($diag tril))))
          (il ($inverse tril)))
      (let ((c (* k (log (* 2 pi))))
            (dx (mvn/sub data mean))
            (icv ($mm ($transpose il) il)))
        ($sum ($mul -0.5 ($add ($add c v) ($mm ($mm dx icv) ($transpose dx)))))))))

(defmethod score/mvn ((data node) (mean node) (tril tensor))
  (when (of-mvn-p tril)
    (let ((k ($count mean))
          (v ($sum ($log ($diag tril))))
          (il ($inverse tril)))
      (let ((c (* k (log (* 2 pi))))
            (dx (mvn/sub data mean))
            (icv ($mm ($transpose il) il)))
        ($sum ($mul -0.5 ($add ($add c v) ($mm ($mm dx icv) ($transpose dx)))))))))

(defmethod score/mvn ((data node) (mean tensor) (tril node))
  (when (of-mvn-p ($data tril))
    (let ((k ($count mean))
          (v ($sum ($log ($diag tril))))
          (il ($inverse tril)))
      (let ((c (* k (log (* 2 pi))))
            (dx (mvn/sub data mean))
            (icv ($mm ($transpose il) il)))
        ($sum ($mul -0.5 ($add ($add c v) ($mm ($mm dx icv) ($transpose dx)))))))))

(defmethod score/mvn ((data node) (mean node) (tril node))
  (when (of-mvn-p ($data tril))
    (let ((k ($count mean))
          (v ($sum ($log ($diag tril))))
          (il ($inverse tril)))
      (let ((c (* k (log (* 2 pi))))
            (dx (mvn/sub data mean))
            (icv ($mm ($transpose il) il)))
        ($sum ($mul -0.5 ($add ($add c v) ($mm ($mm dx icv) ($transpose dx)))))))))

(defmethod sample/mvn ((mean tensor) (tril tensor) &optional (n 1))
  (let ((rn ($reshape! ($normal! (tensor (* n ($size mean 0))) 0 1) n ($size mean 0))))
    (cond ((= n 1) ($reshape! ($add ($mm rn tril) mean) ($size mean 0)))
          ((> n 1) ($add ($mm rn tril) ($mm (ones n 1) ($reshape mean 1 ($size mean 0))))))))

(defmethod sample/mvn ((mean node) (tril tensor) &optional (n 1))
  (let ((mean ($data mean)))
    (let ((rn ($reshape! ($normal! (tensor (* n ($size mean 0))) 0 1) n ($size mean 0))))
      (cond ((= n 1) ($reshape! ($add ($mm rn tril) mean) ($size mean 0)))
            ((> n 1) ($add ($mm rn tril) ($mm (ones n 1) ($reshape mean 1 ($size mean 0)))))))))

(defmethod sample/mvn ((mean tensor) (tril node) &optional (n 1))
  (let ((tril ($data tril)))
    (let ((rn ($reshape! ($normal! (tensor (* n ($size mean 0))) 0 1) n ($size mean 0))))
      (cond ((= n 1) ($reshape! ($add ($mm rn tril) mean) ($size mean 0)))
            ((> n 1) ($add ($mm rn tril) ($mm (ones n 1) ($reshape mean 1 ($size mean 0)))))))))

(defmethod sample/mvn ((mean node) (tril tensor) &optional (n 1))
  (let ((mean ($data mean))
        (tril ($data tril)))
    (let ((rn ($reshape! ($normal! (tensor (* n ($size mean 0))) 0 1) n ($size mean 0))))
      (cond ((= n 1) ($reshape! ($add ($mm rn tril) mean) ($size mean 0)))
            ((> n 1) ($add ($mm rn tril) ($mm (ones n 1) ($reshape mean 1 ($size mean 0)))))))))
