(in-package :th)

(defgeneric score/gaussian (data mean sd))
(defgeneric sample/gaussian (mean sd &optional n))

(defun score/normal (data mean sd) (score/gaussian data mean sd))
(defun sample/normal (mean sd &optional (n 1)) (sample/gaussian mean sd n))

(defun of-gaussian-p (sd) (of-plusp sd))

(defmethod score/gaussian ((data number) (mean number) (sd number))
  (when (of-gaussian-p sd)
    (let ((c (- (log (sqrt (* 2 pi)))))
          (var2 (* 2 ($square sd)))
          (lsd (log sd))
          (z (- data mean)))
      (- c lsd (/ ($square z) var2)))))

(defmethod score/gaussian ((data number) (mean node) (sd number))
  (when (of-gaussian-p sd)
    (let ((c (- (log (sqrt (* 2 pi)))))
          (var2 (* 2 ($square sd)))
          (lsd (log sd))
          (z ($sub data mean)))
      ($sub (- c lsd) ($div ($square z) var2)))))

(defmethod score/gaussian ((data number) (mean number) (sd node))
  (when (of-gaussian-p ($data sd))
    (let ((c (- (log (sqrt (* 2 pi)))))
          (var2 ($mul 2 ($square sd)))
          (lsd ($log sd))
          (z (- data mean)))
      ($sub ($sub c lsd) ($div ($square z) var2)))))

(defmethod score/gaussian ((data number) (mean node) (sd node))
  (when (of-gaussian-p ($data sd))
    (let ((c (- (log (sqrt (* 2 pi)))))
          (var2 ($mul 2 ($square sd)))
          (lsd ($log sd))
          (z ($sub data mean)))
      ($sub ($sub c lsd) ($div ($square z) var2)))))

(defmethod score/gaussian ((data tensor) (mean number) (sd number))
  (when (of-gaussian-p sd)
    (let ((c (- (log (sqrt (* 2 pi)))))
          (var2 (* 2 ($square sd)))
          (lsd (log sd))
          (z ($sub data mean))
          (n ($count data)))
      ($sub (* n (- c lsd)) ($div ($sum ($square z)) var2)))))

(defmethod score/gaussian ((data tensor) (mean node) (sd number))
  (when (of-gaussian-p sd)
    (let ((c (- (log (sqrt (* 2 pi)))))
          (var2 (* 2 ($square sd)))
          (lsd (log sd))
          (z ($sub data mean))
          (n ($count data )))
      ($sub (* n (- c lsd)) ($div ($sum ($square z)) var2)))))

(defmethod score/gaussian ((data tensor) (mean number) (sd node))
  (when (of-gaussian-p ($data sd))
    (let ((c (- (log (sqrt (* 2 pi)))))
          (var2 ($mul 2 ($square sd)))
          (lsd ($log sd))
          (z ($sub data mean))
          (n ($count data)))
      ($sub ($mul n ($sub c lsd)) ($div ($sum ($square z)) var2)))))

(defmethod score/gaussian ((data tensor) (mean node) (sd node))
  (when (of-gaussian-p ($data sd))
    (let ((c (- (log (sqrt (* 2 pi)))))
          (var2 ($mul 2 ($square sd)))
          (lsd ($log sd))
          (z ($sub data mean))
          (n ($count data)))
      ($sub ($mul n ($sub c lsd)) ($div ($sum ($square z)) var2)))))

(defmethod score/gaussian ((data node) (mean number) (sd number))
  (when (of-gaussian-p sd)
    (let ((c (- (log (sqrt (* 2 pi)))))
          (var2 (* 2 ($square sd)))
          (lsd (log sd))
          (z ($sub data mean))
          (n (if ($tensorp data) ($count data) 1)))
      ($sub (* n (- c lsd)) ($div ($sum ($square z)) var2)))))

(defmethod score/gaussian ((data node) (mean node) (sd number))
  (when (of-gaussian-p sd)
    (let ((c (- (log (sqrt (* 2 pi)))))
          (var2 (* 2 ($square sd)))
          (lsd (log sd))
          (z ($sub data mean))
          (n (if ($tensorp data) ($count data) 1)))
      ($sub (* n (- c lsd)) ($div ($sum ($square z)) var2)))))

(defmethod score/gaussian ((data node) (mean number) (sd node))
  (when (of-gaussian-p ($data sd))
    (let ((c (- (log (sqrt (* 2 pi)))))
          (var2 ($mul 2 ($square sd)))
          (lsd ($log sd))
          (z ($sub data mean))
          (n (if ($tensorp data) ($count data) 1)))
      ($sub ($mul n ($sub c lsd)) ($div ($sum ($square z)) var2)))))

(defmethod score/gaussian ((data node) (mean node) (sd node))
  (when (of-gaussian-p ($data sd))
    (let ((c (- (log (sqrt (* 2 pi)))))
          (var2 ($mul 2 ($square sd)))
          (lsd ($log sd))
          (z ($sub data mean))
          (n (if ($tensorp data) ($count data) 1)))
      ($sub ($mul n ($sub c lsd)) ($div ($sum ($square z)) var2)))))

(defmethod sample/gaussian ((mean number) (sd number) &optional (n 1))
  (cond ((= n 1) (random/normal mean sd))
        ((> n 1) ($normal! (tensor n) mean sd))))

(defmethod sample/gaussian ((mean node) (sd number) &optional (n 1))
  (cond ((= n 1) (random/normal ($data mean) sd))
        ((> n 1) ($normal! (tensor n) ($data mean) sd))))

(defmethod sample/gaussian ((mean number) (sd node) &optional (n 1))
  (cond ((= n 1) (random/normal mean ($data sd)))
        ((> n 1) ($normal! (tensor n) mean ($data sd)))))

(defmethod sample/gaussian ((mean node) (sd node) &optional (n 1))
  (cond ((= n 1) (random/normal ($data mean) ($data sd)))
        ((> n 1) ($normal! (tensor n) ($data mean) ($data sd)))))
